@using System.Diagnostics
@using EventHorizon.Blazor.Server.Interop;

<div>
    <h3>Interop Get Class Cached Test</h3>
    <ReportTimeTaken Runs="_max" TimeTaken="TimeTaken" />
    <button class="run-btn" @onclick="HandleRunTest">Run</button>
</div>

@code {
    public TimeSpan TimeTaken { get; set; }

    const int _max = 1_000;
    private async Task HandleRunTest()
    {
        var s1 = Stopwatch.StartNew();
        for (int i = 0; i < _max; i++)
        {
            var value = await RunTest();
        }
        s1.Stop();
        TimeTaken = s1.Elapsed;
        Console.WriteLine(((double)(s1.ElapsedMilliseconds * 1000000) / _max).ToString("0.00 ns"));
    }

    private Vector3Class _vector3Class;

    public async ValueTask<Vector3Class> RunTest()
    {
        if (_vector3Class == null)
        {
            _vector3Class = await EventHorizonBlazorInterop.GetClass<Vector3Class>(
                "getObject",
                "obj",
                (entity) =>
                {
                    return new Vector3Class(entity);
                }
            );
        }
        return _vector3Class;
    }

    [System.Text.Json.Serialization.JsonConverter(typeof(CachedEntityConverter<Vector3Class>))]
    public class Vector3Class
        : CachedEntity
    {
        public ValueTask<string> get_X()
        {
            return EventHorizonBlazorInterop.Get<string>(
                this.___guid,
                "X"
            );
        }
        public ValueTask set_X(string value)
        {
            return EventHorizonBlazorInterop.Set(
                this.___guid,
                "X",
                value
            );
        }

        public Vector3Class(
            ICachedEntity entity
        )
        {
            ___guid = entity.___guid;
        }
    }
}
